#ifndef BIG_DECIMAL_H
#define BIG_DECIMAL_H

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

/**
 * Структура для представления десятичного значения.
 *
 * bits[0], bits[1] содержат младшие, старшие 64 бита.
 * bits[2] содержит коэффициент масштабирования и знак.
 *
 * @field bits Массив из 3 длинных целых чисел, представляющих десятичное
 * значение.
 */
typedef struct {
  long int bits[3];
} big_decimal;

/**
 * Складывает два big_decimal.
 *
 * Оператор '+'
 *
 * @param value_1 Первое десятичное значение.
 * @param value_2 Второе десятичное значение.
 * @param result Указатель на результат сложения.
 * @return Код ошибки (0 - ок, 1 - число слишком велико или равно бесконечности,
 *         2 - число слишком мало или равно отрицательной бесконечности).
 */
int add_big(big_decimal value_1, big_decimal value_2, big_decimal *result);

/**
 * Вычитает одно десятичное значение из другого.
 *
 * Оператор '-'
 *
 * @param value_1 Первое десятичное значение.
 * @param value_2 Второе десятичное значение.
 * @param result Указатель на результат вычитания.
 * @return Код ошибки (0 - ок, 1 - число слишком велико или равно бесконечности,
 *         2 - число слишком мало или равно отрицательной бесконечности).
 */
int sub_big(big_decimal value_1, big_decimal value_2, big_decimal *result);

/**
 * Умножает два десятичных значения.
 *
 * Оператор '*'
 *
 * @param value_1 Первое десятичное значение.
 * @param value_2 Второе десятичное значение.
 * @param result Указатель на результат умножения.
 * @return Код ошибки (0 - ок, 1 - число слишком велико или равно бесконечности,
 *         2 - число слишком мало или равно отрицательной бесконечности).
 */
int mul_big(big_decimal value_1, big_decimal value_2, big_decimal *result);

/**
 * Делит одно десятичное значение на другое.
 *
 * Оператор '/'
 *
 * @param value_1 Первое десятичное значение.
 * @param value_2 Второе десятичное значение.
 * @param result Указатель на результат деления.
 * @return Код ошибки (0 - ок, 1 - число слишком велико или равно бесконечности,
 *         2 - число слишком мало или равно отрицательной бесконечности,
 *         3 - деление на 0).
 */
int div_big(big_decimal value_1, big_decimal value_2, big_decimal *result);

/**
 * Изменяет знак десятичного значения на противоположный.
 *
 * @param value Исходное десятичное значение.
 * @param result Указатель на результат изменения знака.
 * @return Код ошибки (0 - ок, 1 - ошибка вычисления).
 */
int s21_negate_big(big_decimal value, big_decimal *result);

#endif  // BIG_DECIMAL_H
