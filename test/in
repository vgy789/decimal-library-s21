#include <check.h>
#include <stdio.h>

#include "../decimal/bitwise_helper.h"
#include "../decimal/s21_decimal.h"

#test set_sign_positive
s21_decimal value = {0};
set_sign(&value, plus);

ck_assert(((value.bits[3] >> 31) & 1) == plus);

#test set_sign_negative
s21_decimal value = {0};
set_sign(&value, minus);

ck_assert(((value.bits[3] >> 31) & 1) == minus);

#test get_sign_positive
s21_decimal value = {0};
set_sign(&value, plus);

ck_assert(get_sign(value) == plus);

#test get_sign_negative
s21_decimal value = {0};
set_sign(&value, minus);

ck_assert(get_sign(value) == minus);

#test set_bit_zero_false
s21_decimal value = (s21_decimal){{0}};
set_bit(&value, 0, false);

ck_assert(get_bit(value, 0) == false);

#test set_bit_zero_true
s21_decimal value = (s21_decimal){{0}};
set_bit(&value, 0, true);

ck_assert(get_bit(value, 0) == true);

#test set_bit_one_false
s21_decimal value = (s21_decimal){{1}};
set_bit(&value, 0, false);

ck_assert(get_bit(value, 0) == false);

#test set_bit_one_true
s21_decimal value = (s21_decimal){{1}};
set_bit(&value, 16, true);

ck_assert(get_bit(value, 16) == true);

#test set_bit_middle_false
s21_decimal value = (s21_decimal){{0}};
set_bit(&value, 16, false);

ck_assert(get_bit(value, 16) == false);

#test set_bit_middle_true
s21_decimal value = (s21_decimal){{0}};
set_bit(&value, 16, true);

ck_assert(get_bit(value, 16) == true);

#test set_bit_overflow_true
s21_decimal value = (s21_decimal){{0}};
set_bit(&value, 96, true);

ck_assert(get_bit(value, 96) == true);

#test set_bit_overflow_false
s21_decimal value = (s21_decimal){{0}};
set_bit(&value, 96, false);

ck_assert(get_bit(value, 96) == false);

#test add_positive_numbers
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{30, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_numbers
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
s21_decimal expected = {{30, 0, 0, 0x80000000}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_positive_numbers_float
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_scale(&value_1, 10);
set_scale(&value_2, 5);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{1000032, 0, 0, 0}};
set_scale(&expected, 5);
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_numbers_float
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
set_scale(&value_1, 10);
set_scale(&value_2, 5);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{1000032, 0, 0, 0x80000000}};
set_scale(&expected, 5);
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_positive_numbers_float_int
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_scale(&value_1, 10);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{100000000020, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_float_positive_int
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_1, minus);
set_scale(&value_1, 10);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{99999999980, 0, 0, 0x80000000}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_positive_int_negative_float
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_2, minus);
set_scale(&value_2, 5);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{1999990, 0, 0, 0x80000000}};
set_scale(&expected, 5);
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_int_positive_float
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_1, minus);
set_scale(&value_2, 5);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{1999990, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_positive_float_negative_int
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_2, minus);
set_scale(&value_1, 5);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{999980, 0, 0, 0}};
set_scale(&expected, 5);
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_positive_and_negative
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_2, minus);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{10, 0, 0, 0x80000000}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_and_positive
s21_decimal value_1 = {{10, 0, 0, 0}};
s21_decimal value_2 = {{20, 0, 0, 0}};
set_sign(&value_1, minus);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{10, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_overflow
s21_decimal value_1 = {{4294967295, 4294967295, 4294967295, 0}};
s21_decimal value_2 = {{1, 0, 0, 0}};
s21_decimal expected = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 1);

#test add_overflow_two
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{4294967295, 4294967295, 4294967295, 0}};
s21_decimal expected = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 1);

#test add_overflow_three
s21_decimal value_1 = {{4294967295, 4294967295, 4294967295, 0}};
s21_decimal value_2 = {{4294967295, 4294967295, 4294967295, 0}};
s21_decimal expected = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 1);

#test add_overflow_negative
s21_decimal value_1 = {{4294967295, 4294967295, 4294967295, 0}};
s21_decimal value_2 = {{1, 0, 0, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
s21_decimal expected = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 1);

#test add_overflow_negative_two
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{4294967295, 4294967295, 4294967295, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
s21_decimal expected = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 1);

#test add_overflow_negative_three
s21_decimal value_1 = {{4294967295, 4294967295, 4294967295, 0}};
s21_decimal value_2 = {{4294967295, 4294967295, 4294967295, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
s21_decimal expected = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 1);

#test add_positive_numbers_zero
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_positive_and_negative_zero
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
set_sign(&value_2, minus);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_and_positive_zero
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
set_sign(&value_1, minus);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_numbers_zero
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
s21_decimal expected = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_positive_numbers_float_big_scale
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{2, 0, 0, 0}};
set_scale(&value_1, 28);
set_scale(&value_2, 27);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{12, 0, 0, 0}};
set_scale(&expected, 27);
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test add_negative_numbers_float_big_scale
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{2, 0, 0, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
set_scale(&value_1, 28);
set_scale(&value_2, 27);
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{12, 0, 0, 0x80000000}};
set_scale(&expected, 27);
int return_code = s21_add(value_1, value_2, &result);

ck_assert(s21_is_equal(result, expected) == 1);
ck_assert(return_code == 0);

#test positive_s21_is_equal_00
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_equal_01
s21_decimal value_1 = {{0, 500, 1, 0}};
s21_decimal value_2 = {{0, 500, 1, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
set_scale(&value_1, 27);
set_scale(&value_2, 27);
bool result = s21_is_equal(value_1, value_2);
ck_assert(result == 1);

#test negative_s21_is_equal_00
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_equal_01
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{1, 0, 0, 0}};
set_sign(&value_1, minus);
bool result = s21_is_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_equal_02
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{1, 0, 0, 0}};
set_scale(&value_1, 27);
bool result = s21_is_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_equal_03
s21_decimal value_1 = {{0, 1, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_not_equal_00
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_not_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_not_equal_01
s21_decimal value_1 = {{0, 500, 1, 0}};
s21_decimal value_2 = {{0, 500, 1, 0}};
set_sign(&value_1, minus);
set_sign(&value_2, minus);
set_scale(&value_1, 27);
set_scale(&value_2, 27);
bool result = s21_is_not_equal(value_1, value_2);
ck_assert(result == 0);

#test positive_s21_is_not_equal_00
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_not_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_not_equal_01
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{1, 0, 0, 0}};
set_sign(&value_1, minus);
bool result = s21_is_not_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_not_equal_02
s21_decimal value_1 = {{1, 0, 0, 0}};
s21_decimal value_2 = {{1, 0, 0, 0}};
set_scale(&value_1, 27);
bool result = s21_is_not_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_not_equal_03
s21_decimal value_1 = {{0, 1, 0, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_not_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_00
s21_decimal value_1 = {{0, 1, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_01
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_1, minus);
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 27);
set_scale(&value_2, 26);
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 1);

#test negative_s21_is_less_00
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 1, 0, 0}};
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_less_01
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_less_02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_2, minus);
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_less_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 25);
set_scale(&value_2, 26);
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_less_04
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
bool result = s21_is_less(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater_00
s21_decimal value_1 = {{0, 1, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater_01
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater_02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_1, minus);
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 27);
set_scale(&value_2, 26);
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater_04
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 0);

#test positive_s21_is_greater_00
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 1, 0, 0}};
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_greater_01
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_greater_02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_2, minus);
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_greater_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 25);
set_scale(&value_2, 26);
bool result = s21_is_greater(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_or_equal_000
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_or_equal_00
s21_decimal value_1 = {{0, 1, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_or_equal_01
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_or_equal_02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_1, minus);
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_less_or_equal_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 27);
set_scale(&value_2, 26);
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 1);

#test negative_s21_is_less_or_equal_00
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 1, 0, 0}};
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_less_or_equal_01
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_less_or_equal_02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_2, minus);
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_less_or_equal_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 25);
set_scale(&value_2, 26);
bool result = s21_is_less_or_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater_or_equal_00
s21_decimal value_1 = {{0, 1, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater__or_equal01
s21_decimal value_1 = {{0, 0, 0, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater__or_equal02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_1, minus);
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 0);

#test negative_s21_is_greater_or_equal_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 27);
set_scale(&value_2, 26);
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 0);

#test positive_s21_is_greater_or_equal_000
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_greater_or_equal_00
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 1, 0, 0}};
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_greater_or_equal_01
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 0, 0}};
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_greater_or_equal_02
s21_decimal value_1 = {{0, 0, 1, 0}};
s21_decimal value_2 = {{0, 0, 1, 0}};
set_sign(&value_2, minus);
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 1);

#test positive_s21_is_greater_or_equal_03
s21_decimal value_1 = {{1, 0, 1, 0}};
s21_decimal value_2 = {{1, 0, 1, 0}};
set_scale(&value_1, 25);
set_scale(&value_2, 26);
bool result = s21_is_greater_or_equal(value_1, value_2);
ck_assert(result == 1);